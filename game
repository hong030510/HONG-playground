import sys
import pygame
import random

# 게임 화면 크기
WINDOW_WIDTH = 1000
WINDOW_HEIGHT = 550
game_start = False
# 색상
WHITE = (255, 255, 255)
Black = (0, 0, 0)
Red = (255, 0, 0)
sbird = False

life = 3
stage = 1
# 속도와 질량 기본 값
VELOCITY = 5
MASS = 4

img_load1 = pygame.image.load("image/police1.png")
img_load2 = pygame.image.load("image/police2.png")
img_load1 = pygame.transform.scale(img_load1,(100,100))
img_load2 = pygame.transform.scale(img_load2,(100,100))
motion = [img_load1,img_load2]
background1 = pygame.image.load("image/background1.png")
background2 = pygame.image.load("image/background2.png")
background3 = pygame.image.load("image/background3.png")


class Player:

    def __init__(self):
        self.image = ""
        self.dx = 0
        self.dy = 0
        self.rect = ""
        self.isJump = 0
        self.v = VELOCITY  # 속도
        self.m = MASS  # 질량
        self.walkcount = 0
        self.silde = False
        self.simage = ""
    def load_palyer(self):
        self.image = pygame.image.load("image/police1.png")
        self.simage = pygame.image.load("image/slide.png")
        # 크기 조정
        self.image = pygame.transform.scale(self.image, (130, 130))
        self.simage = pygame.transform.scale(self.simage, (120,120))
        self.rect = self.image.get_rect()
        self.rect.bottom = WINDOW_HEIGHT
        self.rect.centerx = round(WINDOW_WIDTH / 9)

    def draw_player(self):
        self.walkcount +=1
        if self.silde == False:
            if self.walkcount> 1:
                self.walkcount = 0

            SCREEN.blit(motion[self.walkcount],[self.rect.x,self.rect.y])
        if self.silde ==True:
            SCREEN.blit(self.simage,[self.rect.x,self.rect.y])

    def jump(self, j):
        self.isJump = j

    def update(self):
        # isJump 값이 0보다 큰지 확인
        if self.isJump > 0:
            # isJump 값이 2일 경우 속도를 리셋
            # 점프 한 상태에서 다시 점프를 위한 값

            # 이 코드를 주석처리하면 이중점프를 못한다.
            # if self.isJump == 2:
            #     self.v = VELOCITY

            # 역학공식 계산 (F). F = 0.5 * mass * velocity^2.
            if self.v > 0:
                # 속도가 0보다 클때는 위로 올라감
                F = (0.5 * self.m * (self.v * self.v))
            else:
                # 속도가 0보다 작을때는 아래로 내려감
                F = -(0.5 * self.m * (self.v * self.v))

            # 좌표 수정 : 위로 올라가기 위해서는 y 좌표를 줄여준다.
            self.rect.y -= round(F)

            # 속도 줄여줌
            self.v -= 0.35

            # 바닥에 닿았을때, 변수 리셋
            if self.rect.bottom > WINDOW_HEIGHT:
                self.rect.bottom = WINDOW_HEIGHT
                self.isJump = 0
                self.v = VELOCITY


class Runer:

    def __init__(self):
        self.image = ""
        self.dx = 2
        self.dy = 0
        self.rect = ""

    def load_Runer(self):
        self.image = pygame.image.load("image/s2.png")
        # 크기 조정
        self.image = pygame.transform.scale(self.image, (130, 130))
        self.rect = self.image.get_rect()
        self.rect.bottom = round(WINDOW_HEIGHT)
        self.rect.centerx = round(WINDOW_WIDTH)

    def move_runer(self):
        self.rect.centerx -= self.dx

    def draw_Runer(self):
        SCREEN.blit(self.image, [self.rect.x, self.rect.y])


class Stone:
    def __init__(self):
        # 돌의 이동속도
        self.dx = 10
        self.dy = 0

    def load_stone(self):
        # 돌맹이 불러오기
        self.image = pygame.image.load("image/stone.png")
        self.image = pygame.transform.scale(self.image, (80, 80))
        self.rect = self.image.get_rect()
        self.rect.centerx = round(WINDOW_WIDTH)
        self.rect.bottom = WINDOW_HEIGHT

    def move_stone(self):
        self.rect.centerx -= self.dx

    def draw_stone(self):
        SCREEN.blit(self.image, [self.rect.x, self.rect.y])

class Bird:
    def __init__(self):
        # 돌의 이동속도
        self.dx = 20
        self.dy = 0

    def load_bird(self):
        # 돌맹이 불러오기
        self.image = pygame.image.load("image/bird.png")
        self.image = pygame.transform.scale(self.image, (130, 130))
        self.rect = self.image.get_rect()
        self.rect.centerx = round(WINDOW_WIDTH)
        self.rect.bottom = round(WINDOW_HEIGHT*6/7)

    def move_bird(self):
        self.rect.centerx -= self.dx

    def draw_bird(self):
        SCREEN.blit(self.image, [self.rect.x, self.rect.y])


def main():
    global SCREEN, WINDOW_WIDTH, WINDOW_HEIGHT, game_start, life, stage,sbird

    # pygame 초기화 및 스크린 생성
    pygame.init()
    SCREEN = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
    pygame.display.set_caption("Jump Test")

    clock = pygame.time.Clock()

    # 게임속 요소 생성
    player = Player()
    stone_list = [Stone()]
    runer = Runer()
    bird_list =[Bird()]

    # 요소들 불러오기
    player.load_palyer()
    runer.load_Runer()
    stone_list[0].load_stone()
    bird_list[0].load_bird()

    playing = True

    while playing:
        Myfont = pygame.font.SysFont(None, 50)
        subfont = pygame.font.SysFont(None, 30)
        ingame_text = Myfont.render("press the 'p'", True, Black)
        ingame_text_Rect = ingame_text.get_rect()
        ingame_text_Rect.centerx = round(WINDOW_WIDTH / 2) - ingame_text_Rect.centerx
        ingame_text_Rect.bottom = round(WINDOW_HEIGHT / 2) - ingame_text_Rect.bottom
        game_over = Myfont.render("GAME OVER", True, Black)
        game_over_Rect = game_over.get_rect()
        game_over_Rect.centerx = round(WINDOW_WIDTH / 2) - game_over_Rect.centerx
        game_over_Rect.bottom = round(WINDOW_HEIGHT / 2) - game_over_Rect.bottom
        life_font = Myfont.render(f"Life:{life}", True, Red)
        restart = subfont.render("press the 'p'", True, Black)
        restart_rect = restart.get_rect()
        restart_rect.centerx = round(WINDOW_WIDTH / 2) - restart_rect.centerx
        restart_rect.bottom = round(WINDOW_HEIGHT / 2) - restart_rect.bottom + 50
        clear = Myfont.render("CLEAR!!", True, Black)
        clear_Rect = clear.get_rect()
        clear_Rect.centerx = round(WINDOW_WIDTH / 2) - clear_Rect.centerx
        clear_Rect.bottom = round(WINDOW_HEIGHT / 2) - clear_Rect.bottom

        # 키가 눌린 상태 체크
        keys = pygame.key.get_pressed()
        # 스페이스키가 눌려있고, isJump가 2라면 1로 변경한다.
        # 이 작업을 해주지 않으면 스페이스가 눌려있는 상태면 플레이어가 계속 위로 올라가게 된다.
        if (keys[pygame.K_SPACE]):
            if player.isJump == 2:
                player.jump(1)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                playing = False
                pygame.quit()
                sys.exit()

            if event.type == pygame.KEYDOWN:
                # 스페이스키를 눌렀을 때,
                if event.key == pygame.K_s:
                    player.silde =True
                    sbird = True
                if event.key == pygame.K_p:
                    game_start = True
                    life = 3
                    stage = 1
                if game_start == True:

                    # 0이면 바닥인 상태 : 1로 변경
                    # 1이면 점프를 한 상태 : 2로 변경, 점프한 위치에서 다시 점프를 하게 된다. 즉, 이중점프
                    if event.key == pygame.K_SPACE:
                        if player.isJump == 0:
                            player.jump(1)
                        elif player.isJump == 1:
                            player.jump(2)
            if event.type == pygame.KEYUP:
                if event.key == pygame.K_s:
                    player.silde = False
                    sbird = False

        # 배경색을 흰색으로

        ''' 게임 코드 작성 '''

        if game_start:

            if stage == 1:
                SCREEN.blit(background1, [0, 0])

            elif stage == 2:
                SCREEN.blit(background2, [0, 0])

            elif stage == 3:
                SCREEN.blit(background3, [0, 0])
                stone.dx=10

            elif stage == 4:
                game_start =  False

            SCREEN.blit(life_font, [0, 0])
            # 객체들 그리기
            player.draw_player()

            player.update()
            for stone in stone_list:
                if stone.rect.x < 0:
                    stone_list.remove(stone)
                    stone_list.append(Stone())
                    stone_list[-1].load_stone()
                    break
            stone.draw_stone()
            runer.draw_Runer()
            stone.move_stone()
            runer.move_runer()

            for bird in bird_list:
                if bird.rect.x<0:
                    bird_list.remove(bird)
                    bird_list.append(Bird())
                    bird_list[-1].load_bird()
                    break
            if stage ==2 or stage ==3:
                bird.draw_bird()
                bird.move_bird()

            player.mask = pygame.mask.from_surface(player.image)
            stone.mask = pygame.mask.from_surface(stone.image)
            bird.mask = pygame.mask.from_surface(bird.image)
            runer.mask = pygame.mask.from_surface(runer.image)
            if (pygame.sprite.collide_rect(player, stone)):
                stone.rect.x = 1000
                life -= 1
                if life == 0:
                    game_start = False
                    stone.rect.x = 1000
                    runer.rect.x = 1000
                    bird.rect.x = 1000
                    SCREEN.fill(WHITE)
                    SCREEN.blit(game_over, [game_over_Rect.centerx, game_over_Rect.bottom])
                    SCREEN.blit(restart, [restart_rect.centerx, restart_rect.bottom])

            if (pygame.sprite.collide_rect(player, runer)):

                runer.rect.x = 1000
                stage += 1
            if (pygame.sprite.collide_rect(player, bird)):
                if sbird == True and player.isJump == 0:
                    if life == 0:
                        game_start = False
                        stone.rect.x = 1000
                        runer.rect.x = 1000
                        bird.rect.x = 1000
                        SCREEN.fill(WHITE)
                        SCREEN.blit(game_over, [game_over_Rect.centerx, game_over_Rect.bottom])
                        SCREEN.blit(restart, [restart_rect.centerx, restart_rect.bottom])

                elif player.isJump == 1 and sbird == True:
                    bird.rect.x = 1000
                    life -= 1
                else:
                    bird.rect.x = 1000
                    life -= 1


                if life == 0:
                    game_start = False
                    stone.rect.x = 1000
                    runer.rect.x = 1000
                    bird.rect.x = 1000
                    SCREEN.fill(WHITE)
                    SCREEN.blit(game_over, [game_over_Rect.centerx, game_over_Rect.bottom])
                    SCREEN.blit(restart, [restart_rect.centerx, restart_rect.bottom])

            if (pygame.sprite.collide_rect(player, runer)):
                stage += 1
                runer.rect.x = 1000


        elif stage == 4 and not game_start:
            SCREEN.fill(WHITE)
            SCREEN.blit(clear, [clear_Rect.centerx, clear_Rect.bottom])

        elif life == 3 and not game_start:
            SCREEN.fill(WHITE)
            SCREEN.blit(ingame_text, [ingame_text_Rect.centerx, ingame_text_Rect.bottom])

        ''' 게임 코드 끝 '''

        pygame.display.flip()

        # 초당 프레임 설정
        clock.tick(60)


if __name__ == '__main__':
    main()
