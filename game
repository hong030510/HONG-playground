import sys
import pygame
import random

# 게임 화면 크기
WINDOW_WIDTH = 1000
WINDOW_HEIGHT = 400
game_start = False
# 색상
WHITE = (255, 255, 255)
Black = (0, 0, 0)

miss = 0

# 속도와 질량 기본 값
VELOCITY = 7
MASS = 2


class Button():
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height

        self.fillColors = {
            'normal': '#ffffff',
            'hover': '#666666',
            'pressed': '#333333',
        }


class Player:

    def __init__(self):
        self.image = ""
        self.dx = 0
        self.dy = 0
        self.rect = ""
        self.isJump = 0
        self.v = VELOCITY  # 속도
        self.m = MASS  # 질량

    def load_palyer(self):
        # 플레이어 차량
        self.image = pygame.image.load("image/s2.png")
        # 크기 조정
        self.image = pygame.transform.scale(self.image, (80, 80))
        self.rect = self.image.get_rect()
        self.rect.bottom = WINDOW_HEIGHT
        self.rect.centerx = round(WINDOW_WIDTH / 9)

    # 자동차를 스크린에 그리기
    def draw_player(self):
        SCREEN.blit(self.image, [self.rect.x, self.rect.y])

    def jump(self, j):
        self.isJump = j

    def update(self):
        # isJump 값이 0보다 큰지 확인
        if self.isJump > 0:
            # isJump 값이 2일 경우 속도를 리셋
            # 점프 한 상태에서 다시 점프를 위한 값

            # 이 코드를 주석처리하면 이중점프를 못한다.
            # if self.isJump == 2:
            #     self.v = VELOCITY

            # 역학공식 계산 (F). F = 0.5 * mass * velocity^2.
            if self.v > 0:
                # 속도가 0보다 클때는 위로 올라감
                F = (0.5 * self.m * (self.v * self.v))
            else:
                # 속도가 0보다 작을때는 아래로 내려감
                F = -(0.5 * self.m * (self.v * self.v))

            # 좌표 수정 : 위로 올라가기 위해서는 y 좌표를 줄여준다.
            self.rect.y -= round(F)

            # 속도 줄여줌
            self.v -= 1

            # 바닥에 닿았을때, 변수 리셋
            if self.rect.bottom > WINDOW_HEIGHT:
                self.rect.bottom = WINDOW_HEIGHT
                self.isJump = 0
                self.v = VELOCITY


class Stone:
    def __init__(self):
        # 돌의 이동속도
        self.dx = 8
        self.dy = 0

    def load_stone(self):
        # 돌맹이 불러오기
        self.image = pygame.image.load("image/stone.png")
        self.image = pygame.transform.scale(self.image, (80, 80))
        self.rect = self.image.get_rect()
        self.rect.centerx = round(WINDOW_WIDTH)
        self.rect.bottom = WINDOW_HEIGHT

    def move(self):
        self.rect.centerx -= self.dx

    def draw_stone(self):
        SCREEN.blit(self.image, [self.rect.x, self.rect.y])


def main():
    global SCREEN, WINDOW_WIDTH, WINDOW_HEIGHT, game_start , miss

    # pygame 초기화 및 스크린 생성
    pygame.init()
    SCREEN = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
    pygame.display.set_caption("Jump Test")

    clock = pygame.time.Clock()

    # 게임속 요소 생성
    player = Player()
    stone = Stone()

    # 요소들 불러오기
    player.load_palyer()
    stone.load_stone()

    playing = True

    while playing:
        Myfont = pygame.font.SysFont(None, 50)
        ingame_text = Myfont.render("press the 'p'", True, Black)
        ingame_text_Rect = ingame_text.get_rect()
        ingame_text_Rect.centerx = round(WINDOW_WIDTH / 2)
        ingame_text_Rect.bottom = round(WINDOW_HEIGHT / 2)
        game_over = Myfont.render("GAME OVER", True, Black)
        game_over_Rect = game_over.get_rect()
        game_over_Rect.centerx = round(WINDOW_WIDTH/ 2)
        game_over_Rect.bottom = round(WINDOW_HEIGHT / 2)

        # 키가 눌린 상태 체크
        keys = pygame.key.get_pressed()
        # 스페이스키가 눌려있고, isJump가 2라면 1로 변경한다.
        # 이 작업을 해주지 않으면 스페이스가 눌려있는 상태면 플레이어가 계속 위로 올라가게 된다.
        if (keys[pygame.K_SPACE]):
            if player.isJump == 2:
                player.jump(1)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                playing = False
                pygame.quit()
                sys.exit()

            if event.type == pygame.KEYDOWN:
                # 스페이스키를 눌렀을 때,
                if event.key == pygame.K_p:
                    game_start = True
                if game_start == True:

                    # 0이면 바닥인 상태 : 1로 변경
                    # 1이면 점프를 한 상태 : 2로 변경, 점프한 위치에서 다시 점프를 하게 된다. 즉, 이중점프
                    if event.key == pygame.K_SPACE:
                        if player.isJump == 0:
                            player.jump(1)
                        elif player.isJump == 1:
                            player.jump(2)

        # 배경색을 흰색으로

        ''' 게임 코드 작성 '''

        if game_start:
            SCREEN.fill(WHITE)
            # 객체들 그리기
            player.draw_player()
            stone.draw_stone()

            # 객체들 이동
            player.update()
            stone.move()

            print(stone.rect)
            if (player.rect.colliderect(stone.image.get_rect(topleft=(stone.rect.x, stone.rect.y)))):
                miss += 1
                game_start = False
                print(stone.rect)

        elif miss>=1:
            SCREEN.fill(WHITE)
            SCREEN.blit(game_over,[game_over_Rect.centerx,game_over_Rect.bottom])

        elif miss ==0 and not game_start:
            SCREEN.fill(WHITE)
            SCREEN.blit(ingame_text,[ingame_text_Rect.centerx,ingame_text_Rect.bottom])








        ''' 게임 코드 끝 '''

        pygame.display.flip()

        # 초당 프레임 설정
        clock.tick(60)


if __name__ == '__main__':
    main()
